name: Deploy to EC2

on:
  push:
    branches:
      - main  # 每次推送到 main 分支時觸發
  schedule:
    - cron: '0 0 * * *' #每天午夜(UTC) 觸發

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    # 設置 SSH 密鑰
    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts
    
    # 創建 .env 文件
    - name: Create .env file on EC2
      env:
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        MONGODB_URI: ${{ secrets.MONGODB_URIATEC2 }}
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_API_URL_FUTURE: ${{ secrets.VITE_API_URL_FUTURE }}
      run: |
        ssh -i ~/.ssh/deploy_key $EC2_USER@$EC2_HOST "
          echo 'VITE_API_URL=${VITE_API_URL}' > ~/simpleweb/frontend/.env &&
          echo 'VITE_API_URL_FUTURE=${VITE_API_URL_FUTURE}' >> ~/simpleweb/frontend/.env
          echo 'MONGODB_URI=${MONGODB_URI}' > ~/simpleweb/.env &&
          echo 'PORT=3000' >> ~/simpleweb/.env &&
          echo 'PUBLICIP=${PUBLICIP}' >> ~/simpleweb/.env
        "
    # - name: Build React App with PUBLICIP
    #   run: |
    #     echo "REACT_APP_PUBLIC_IP=${{ secrets.PUBLICIP }}" >> ~/simpleweb/frontend/.env.local &&
    #     cd ~/simpleweb/frontend &&
    #     npm install &&
    #     num run build

    # 部署到 EC2
    - name: Deploy to EC2
      env:
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        ssh -i ~/.ssh/deploy_key $EC2_USER@$EC2_HOST "
          cd ~/simpleweb &&
          git reset --hard HEAD &&  # 清除所有本地變更
          git pull origin main &&

          # 後端啟動
          pm2 start server.js --name backend || pm2 restart backend &&

          # 啟動前端應用
          cd frontend &&
          rm -rf dist &&  # 清除舊的靜態文件
          npm install &&
          npm run build &&

          # 重新啟動前端服務
          pm2 delete frontend || true &&
          pm2 serve dist 3001 --name frontend
        "
    # - name: Delete all data from MongoDB
    #   env:
    #     MONGODB_URI: ${{ secrets.MONGODB_URI }}
    #   run: |
    #     python -m pip install pymongo #安裝 pymongo
    #     python delete_all_data.py
    
    # - name: Save delete log file to EC2
    #   env:
    #     EC2_USER: ${{ secrets.EC2_USER }}
    #     EC2_HOST: ${{ secrets.EC2_HOST }}
    #   run:
    #     scp -i ~/.ssh/deploy_key delete_data.log $EC2_USER@$EC2_HOST:/home/ec2-user/simpleweb/logs/
    
    # # 在EC2上生成假溫度數據
    # - name: Generate new temperature data on EC2
    #   run: |
    #     python generate_faked_data.py &&
    #     echo 'Generated new temperature data'

    # 在EC2上生成真溫度數據
    - name: Generate new temperature data on EC2
      run: |
        python getrealtemp.py &&
        echo 'Get new temperature data'
        
    # 更新 MondoDB 數據
    - name: Update MongoDB with JSON data
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
      run: |
        python -m pip install pymongo &&# 安裝pymongo
        python update_mongodb.py &&     # 執行更新腳本
        echo 'MongoDB updated successfully'
    
    # 設置 Python 環境
    - name: Set up Python environment
      uses: actions/setup-python@v2
      with:
        python-version: "3.9"
  
    # 安裝 Python 依賴
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas prophet pymongo
    
    # 從 MongoDB 獲取數據並生成未來預測
    - name: Generate future predictions using Prophet
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
      run: |
        python predict_future_temperatures.py &&
        echo 'Future predictions generated successfully'

    # 保存日誌到 EC2
    - name: Save log file to EC2
      env:
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        scp -i ~/.ssh/deploy_key data_insertion.log $EC2_USER@$EC2_HOST:/home/ec2-user/simpleweb/logs/